load "Rakefile.common"
load "Rakefile.clean"

### default task
if NX*NY < 4
  task :default => "mosaic.jpg"
  puts "NX=#{NX} NY=#{NY}, default: mosaic.jpg"
else
  task :default => "shrunk.jpg"
  puts "NX=#{NX} NY=#{NY}, default: shrunk.jpg"
end

%w[p d c t s].each do |x|
  directory x
end

IMGTBL = Montage.read_image_tbl(IMAGES_TBL)

### projection
desc "mProjectPP"
rule %r|^p/.*\.fits$| => ["r/%n."+INPUT_SUFFIX,REGION_HDR,"p"] do |t|
  sh "mProjectPP #{t.prerequisites[0]} #{t.name} #{REGION_HDR}" do end
end

### dif & fit
FIT_TBL=[]
DIFF_FITS=[]
DIFF_HASH={}

diffs = Montage.read_overlap_tbl("diffs.tbl")
diffs.each do |c|
  DIFF_FITS << d = "d/"+c[4]
  DIFF_HASH[d] = ["p/"+c[2], "p/"+c[3]]
end
Montage.write_fittxt_tbl("fittxt.tbl", diffs)

desc "mDiff"
rule %r|^d/.*\.fits$| => [proc{|x| DIFF_HASH[x]},"d"] do |t|
  p1,p2 = t.prerequisites
  /diff\.(\d+)\.(\d+)\./ =~ t.name
  c = [$1.to_i, $2.to_i]
  sh "mDiff #{p1} #{p2} #{t.name} #{REGION_HDR}" do |ok,status|
    Montage.fitplane(c, t, FIT_TBL) if ok
  end
end

### concatfit
desc "write_fits_tbl"
file "fits.tbl" => DIFF_FITS do |t|
  Montage.write_fits_tbl(FIT_TBL, "fittxt.tbl", "fits.tbl")
end

### bg-model
desc "mBgModel"
file "corrections.tbl" => ["fits.tbl", IMAGES_TBL] do
  sh "mBgModel -a #{IMAGES_TBL} fits.tbl corrections.tbl"
end

### load corrections
task "load_corrections" => "corrections.tbl" do |t|
  CORRECTION = Montage.load_corrections(t.prerequisites[0],IMGTBL)
end

### background correction
desc "mBackground"
C_IMGTBL=[]
rule %r|^c/.*\.fits$| => ["p/%f","load_corrections",'c'] do |t|
  src = File.basename(t.prerequisites[0])
  params = CORRECTION[src]
  sh "mBackground p/#{src} #{t.name} #{params}" do |ok,status|
    Montage.collect_imgtbl(t, C_IMGTBL) if ok
  end
end

desc "mImgtbl"
file "cimages.tbl" => IMGTBL.map{|x| "c/"+File.basename(x["fname"])} do |t|
  Montage.put_imgtbl(C_IMGTBL, "c", "cimages.tbl")
end

### tile region
desc "mCoverageCheck"
rule %r|^t/tile_.*\.tbl$| => ["t/%n.hdr","cimages.tbl"] do |t|
  sh "mCoverageCheck cimages.tbl #{t.name} -header #{t.prerequisites[0]}"
end

madd_deps = proc do |tile_fits|
  tbl = tile_fits.ext('tbl')
  hdr = tile_fits.ext('hdr')
  img = Montage.read_image_tbl(tbl+"_test")
  [tbl, hdr] + img.map{|x| "c/"+File.basename(x["fname"])}
end

desc "mAdd"
rule %r|^t/tile_.*\.fits$| => [madd_deps,"t"] do |t|
  a = t.prerequisites[0..1].join(" ")
  sh "mAdd -e -p c #{a} #{t.name} "
end

desc "mShrink"
S_IMGTBL = []
rule %r|^s/tile_.*\.fits$| => ["t/%n.fits","s"] do |t|
  sh "mShrink #{t.prerequisites[0]} #{t.name} #{SHRINK_FACTOR}"
  Montage.collect_imgtbl(t, S_IMGTBL)
end

desc "mImgtbl"
file "simages.tbl" do
  Montage.put_imgtbl(S_IMGTBL, "s", "simages.tbl")
end

NY.times do |j|
  NX.times do |i|
    file "simages.tbl" => "s/tile_#{i}_#{j}.fits"
  end
end

### add up to shurnk.fits
desc "mAdd"
file "shrunk.fits" => ["simages.tbl", SHRUNK_HDR] do |t|
  sh "mAdd -n -e -p s #{t.prerequisites.join(' ')} #{t.name}"
end

desc "mJPEG"
file "shrunk.jpg" => ["shrunk.fits"] do |t|
  sh "mJPEG -ct 0 -gray #{t.prerequisites[0]} -0s '99.5%' gaussian -out #{t.name}"
end

### add up to mosaic.fits
desc "mAdd"
file "mosaic.fits" => ["cimages.tbl", REGION_HDR] do |t|
  sh "mAdd -n -e -p c #{t.prerequisites.join(' ')} #{t.name}"
end

desc "mJPEG"
file "mosaic.jpg" => ["mosaic.fits"] do |t|
  sh "mJPEG -ct 0 -gray #{t.prerequisites[0]} -0s '99.5%' gaussian -out #{t.name}"
end
